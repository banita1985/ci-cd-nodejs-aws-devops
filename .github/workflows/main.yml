name: CI Pipeline

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: self-hosted   # ðŸ‘ˆ use your EC2 runner
    steps:
     # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
      # setup nodejs
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      # install and build and test
      - name: Install dependencies
        run: npm install
        
      - name: Build app
        run: npm run build

         # SonarQube scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
       
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: |
            npx sonar-scanner \
            -Dsonar.organization=banita1985 \
            -Dsonar.projectKey=ci-cd-nodejs-aws-devops \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN 

      # Docker build & scan
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/poc17:latest .

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/poc17:latest
          format: 'table'

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/poc17:latest

      # Deploy to EKS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

     # - name: Update kubeconfig for EKS
        #run: aws eks update-kubeconfig --name my-eks-cluster --region ${{ secrets.AWS_REGION }}

      #- name: Deploy to EKS
       # run: kubectl apply -f k8s/
